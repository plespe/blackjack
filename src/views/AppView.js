// Generated by CoffeeScript 1.9.3
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

window.AppView = (function(superClass) {
  extend(AppView, superClass);

  function AppView() {
    return AppView.__super__.constructor.apply(this, arguments);
  }

  AppView.prototype.events = {
    'click .deal-button': "handleDeal",
    'click .bet-button': "handleBet"
  };

  AppView.prototype.handleBet = function(e) {
    var money;
    money = parseInt($(e.currentTarget).attr('value'));
    return this.model.bet(money);
  };

  AppView.prototype.handleDeal = function() {
    return this.model.deal();
  };

  AppView.prototype.initialize = function() {
    this.model.on('bet deal change', (function(_this) {
      return function() {
        return _this.render();
      };
    })(this));
    return this.render();
  };

  AppView.prototype.template = _.template('<button value=100 class="bet-button">Bet 100</button> <button class="deal-button">Deal Hand</button> <span class="bet">Current Bet: </span> <span class="chips">Pile: </span>');

  AppView.prototype.render = function() {
    this.$el.children().detach();
    this.$el.html(this.template(this.model));
    console.log(this.model.get('dealt'));
    if (this.model.dealt) {
      this.$("button").remove();
    }
    this.$('.bet').text("Current Bet: " + this.model.get('betAmount'));
    return this.$('.chips').text("Stack: " + this.model.get('chips'));
  };

  return AppView;

})(Backbone.View);
